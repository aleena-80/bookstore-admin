<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product - Ocean Books</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background-color: rgb(32,31,49); /* Deep navy */
      color: #FFFFFF;
      min-height: 100vh;
      display: flex;
      margin: 0;
    }

    .sidebar {
      width: 220px;
      background: rgb(32,31,49); /* Deep navy */
      color: #FFFFFF;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
    }

    .sidebar-header {
      padding: 20px 10px;
      text-align: center;
      background: rgb(32,31,49); /* Deep navy */
      border-bottom: 1px solid #E5E5E5;
    }

    .sidebar-header h2 {
      font-size: 1.6em;
      margin: 0;
      color: #FFFFFF; /* White text */
      font-weight: 700;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .sidebar ul {
      padding: 10px 0;
    }

    .sidebar li {
      margin-bottom: 10px;
    }

    .sidebar a, .sidebar button {
      color: #FFFFFF;
      text-decoration: none;
      font-size: 1em;
      padding: 12px 20px;
      border-radius: 5px;
      background: none;
      border: none;
      text-align: left;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 10px;
      transition: background 0.3s;
    }

    .sidebar a:hover, .sidebar button:hover {
      background: rgba(255, 186, 222, 0.2); /* Light pink hover */
    }

    .sidebar a.active {
      color: rgb(253, 252, 255);
    }

    .main-content {
      margin-left: 220px;
      flex: 1;
      padding: 20px;
    }

    h1 {
      color: #FFFFFF;
      margin-bottom: 20px;
      font-size: 28px;
      font-weight: 700;
    }

    .add-form {
      background: #FFFFFF;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      max-width: 600px;
    }

    .add-form form {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .add-form input, .add-form textarea, .add-form select {
      padding: 8px;
      border-radius: 5px;
      border: 1px solid #E5E5E5;
      font-size: 14px;
      color: rgb(32,31,49);
      background: #FFFFFF;
    }

    .add-form textarea {
      min-height: 80px;
      resize: vertical;
    }

    .add-form button {
      background: #FFBADE; /* Soft pink */
      color: rgb(32,31,49);
      padding: 10px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.3s;
    }

    .add-form button:hover {
      background: rgba(255, 186, 222, 0.8);
    }

    .image-upload {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .image-upload p {
      font-size: 0.9em;
      color: rgb(32,31,49);
      margin: 0;
    }

    .image-preview {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .image-container {
      position: relative;
      width: 150px;
      height: 150px;
    }

    .image-container img {
      max-width: 100%;
      max-height: 100%;
      height: auto;
      display: block;
      border-radius: 4px;
    }

    .crop-btn, .remove-btn {
      position: absolute;
      top: 5px;
      padding: 5px 10px;
      color: #FFFFFF;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
      transition: background 0.2s;
    }

    .crop-btn {
      right: 45px;
      background: #2ECC71; /* Green */
    }

    .crop-btn:hover {
      background: #27AE60;
    }

    .remove-btn {
      right: 5px;
      background: #E74C3C; /* Red */
    }

    .remove-btn:hover {
      background: #C0392B;
    }

    #cropModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }

    #cropModal .modal-content {
      background: #FFFFFF;
      padding: 20px;
      width: 90%;
      max-width: 600px;
      border-radius: 10px;
      text-align: center;
      color: rgb(32,31,49);
    }

    #cropImage {
      max-width: 100%;
      max-height: 400px;
      height: auto;
      display: block;
      margin: 0 auto;
    }

    #cropModal button {
      padding: 10px 20px;
      margin: 10px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      transition: background 0.3s;
    }

    #cropConfirm {
      background: #2ECC71; /* Green */
      color: #FFFFFF;
    }

    #cropConfirm:hover {
      background: #27AE60;
    }

    #cropCancel {
      background: #E74C3C; /* Red */
      color: #FFFFFF;
    }

    #cropCancel:hover {
      background: #C0392B;
    }

    .field-error {
      color: #E74C3C; /* Red */
      font-size: 0.8em;
      margin-top: -10px;
      display: none;
    }

    .popup {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1001;
      justify-content: center;
      align-items: center;
    }

    .popup-content {
      background: #FFFFFF;
      padding: 20px;
      width: 90%;
      max-width: 400px;
      border-radius: 5px;
      text-align: center;
      color: rgb(32,31,49);
    }

    #popupClose, #validationClose {
      background: #FFBADE; /* Soft pink */
      color: rgb(32,31,49);
      padding: 5px 10px;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      margin-top: 10px;
      transition: background 0.3s;
    }

    #popupClose:hover, #validationClose:hover {
      background: rgba(255, 186, 222, 0.8);
    }

    @media (max-width: 768px) {
      .sidebar {
        width: 180px;
      }

      .main-content {
        margin-left: 180px;
      }

      .sidebar-header h2 {
        font-size: 1.4em;
      }

      .sidebar a, .sidebar button {
        font-size: 0.9em;
        padding: 10px 15px;
      }

      h1 {
        font-size: 24px;
      }

      .add-form {
        padding: 15px;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <div class="sidebar-header">
        <h2><i class="fas fa-user-shield"></i> Admin Panel</h2>
    </div>
    <ul>
      <li><a href="/admin/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>

        <li><a href="/admin/users"><i class="fas fa-users"></i> Users</a></li>
        <li><a href="/admin/categories"><i class="fas fa-tags"></i> Categories</a></li>
        <li><a href="/admin/languages"><i class="fas fa-globe"></i> Languages</a></li>
        <li><a href="/admin/products"><i class="fas fa-book"></i> Products</a></li>
        <li><a href="/admin/orders" class="active"><i class="fas fa-shopping-cart"></i> Orders</a></li>          
        <li><a href="/admin/transactions" class="active"><i class="fas fa-wallet"></i> Wallet</a></li>

        <li><a href="/admin/products-add"><i class="fas fa-plus-circle"></i> Add Product</a></li>
        <li><a href="/admin/coupons" class="active"><i class="fas fa-ticket-alt"></i> Coupons</a></li>
        <li><a href="/admin/banners" class="active"><i class="fas fa-images"></i> Banners</a></li>
        <li><form action="/admin/logout" method="POST"><button><i class="fas fa-sign-out-alt"></i> Logout</button></form></li>
    </ul>
</div>
  <div class="main-content">
    <h1>Add Product</h1>
    <div class="add-form">
      <form method="POST" id="productForm">
        <input type="text" name="name" placeholder="Product Name">
        <span class="field-error" id="name-error">Product name is required</span>
        <input type="number" name="price" placeholder="Price">
        <span class="field-error" id="price-error">Price is required</span>
        <select name="category">
          <option value="">Select Category</option>
          <% categories.forEach(category => { %>
            <option value="<%= category._id %>"><%= category.name %></option>
          <% }); %>
        </select>
        <span class="field-error" id="category-error">Category is required</span>
        <select name="language">
          <option value="">Select Language</option>
          <% languages.forEach(language => { %>
            <option value="<%= language.name %>"><%= language.name %></option>
          <% }); %>
        </select>
        <span class="field-error" id="language-error">Language is required</span>
        <input type="number" name="stock" placeholder="Stock">
        <span class="field-error" id="stock-error">Stock is required</span>      
        <span class="field-error" id="stock-error">No negative number</span>
        <input type="text" name="author" placeholder="Author">
        <span class="field-error" id="author-error">Author is required</span>
        <input type="number" name="discount" placeholder="Discount (%)" min="0" max="100">
        <span class="field-error" id="discount-error">Discount must be between 0 and 100</span>
        <textarea name="description" placeholder="Description"></textarea>
        <span class="field-error" id="description-error">Description is required</span>
        <div class="image-upload">
          <input type="file" name="images" id="imageInput" multiple accept="image/*">
          <span class="field-error" id="images-error">At least 3 images are required</span>
          <p>Select 3 to 5 images (Ctrl/Cmd + click).</p>
          <div class="image-preview" id="imagePreview"></div>
        </div>
        <button type="submit" id="submitBtn">Add Product</button>
      </form>
    </div>
  </div>

  <div id="cropModal">
    <div class="modal-content">
      <img id="cropImage" src="">
      <div>
        <button type="button" id="cropConfirm">Crop and Save</button>
        <button type="button" id="cropCancel">Cancel</button>
      </div>
    </div>
  </div>

  <div id="popupMessage" class="popup">
    <div class="popup-content">
      <span id="popupText"></span>
      <button id="popupClose">Close</button>
    </div>
  </div>

  <div id="validationPopup" class="popup">
    <div class="popup-content">
      <span id="validationText"></span>
      <button id="validationClose">Close</button>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
    const imageInput = document.getElementById('imageInput');
    const imagePreview = document.getElementById('imagePreview');
    const cropModal = document.getElementById('cropModal');
    const cropImage = document.getElementById('cropImage');
    const cropConfirm = document.getElementById('cropConfirm');
    const cropCancel = document.getElementById('cropCancel');
    const productForm = document.getElementById('productForm');
    const popup = document.getElementById('popupMessage');
    const popupText = document.getElementById('popupText');
    const popupClose = document.getElementById('popupClose');
    const validationPopup = document.getElementById('validationPopup');
    const validationText = document.getElementById('validationText');
    const validationClose = document.getElementById('validationClose');
    let cropper;
    let currentImageIdx = 0;
    let imageFiles = [];

    popup.style.display = 'none';
    validationPopup.style.display = 'none';

    popupClose.addEventListener('click', (e) => {
      popup.style.display = 'none';
      e.stopPropagation();
    });
    popup.addEventListener('click', (e) => {
      if (e.target === popup) popup.style.display = 'none';
    });

    validationClose.addEventListener('click', (e) => {
      validationPopup.style.display = 'none';
      e.stopPropagation();
    });
    validationPopup.addEventListener('click', (e) => {
      if (e.target === validationPopup) validationPopup.style.display = 'none';
    });

    imageInput.addEventListener('change', (e) => {
      const files = e.target.files;
      const currentImages = imagePreview.children.length;
      const minImages = 3;
      const maxImages = 5;

      if (currentImages + files.length < minImages && currentImages === 0) {
        document.getElementById('images-error').style.display = 'block';
        showValidationPopup('You must upload at least 3 images.');
        imageInput.value = '';
        return;
      }
      if (currentImages + files.length > maxImages) {
        showValidationPopup(`You can only upload up to ${maxImages} images. Currently ${currentImages} images.`);
        imageInput.value = '';
        return;
      }

      Array.from(files).forEach((file, i) => {
        const reader = new FileReader();
        reader.onload = (event) => {
          const imgContainer = document.createElement('div');
          imgContainer.className = 'image-container';
          const idx = currentImageIdx + i;
          imgContainer.dataset.idx = idx;
          const img = document.createElement('img');
          img.src = event.target.result;

          const cropBtn = document.createElement('button');
          cropBtn.textContent = 'Crop';
          cropBtn.className = 'crop-btn';
          cropBtn.type = 'button';
          cropBtn.addEventListener('click', () => startCrop(img, idx));

          const removeBtn = document.createElement('button');
          removeBtn.textContent = 'X';
          removeBtn.className = 'remove-btn';
          removeBtn.type = 'button';
          removeBtn.addEventListener('click', () => {
            imgContainer.remove();
            imageFiles = imageFiles.filter(f => f.idx !== idx);
          });

          imgContainer.appendChild(img);
          imgContainer.appendChild(cropBtn);
          imgContainer.appendChild(removeBtn);
          imagePreview.appendChild(imgContainer);

          imageFiles.push({ file, idx });
        };
        reader.readAsDataURL(file);
      });
      currentImageIdx += files.length;
      imageInput.value = '';
    });

    function startCrop(imgElement, idx) {
      currentImageIdx = idx;
      cropImage.src = imgElement.src;
      cropModal.style.display = 'flex';
      popup.style.display = 'none';
      validationPopup.style.display = 'none';
      if (cropper) cropper.destroy();
      cropper = new Cropper(cropImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.8,
        responsive: true,
      });
    }

    cropConfirm.addEventListener('click', (e) => {
      e.preventDefault();
      const canvas = cropper.getCroppedCanvas();
      if (!canvas) {
        showValidationPopup('Failed to crop image.');
        cropModal.style.display = 'none';
        cropper.destroy();
        return;
      }

      canvas.toBlob((blob) => {
        const newFile = new File([blob], `cropped-${currentImageIdx}.jpg`, { type: 'image/jpeg' });
        const previewImg = document.querySelector(`.image-container[data-idx="${currentImageIdx}"] img`);
        previewImg.src = URL.createObjectURL(newFile);

        const existingIndex = imageFiles.findIndex(f => f.idx === currentImageIdx);
        if (existingIndex !== -1) {
          imageFiles[existingIndex] = { file: newFile, idx: currentImageIdx };
        } else {
          imageFiles.push({ file: newFile, idx: currentImageIdx });
        }

        cropModal.style.display = 'none';
        cropper.destroy();
      }, 'image/jpeg');
    });

    cropCancel.addEventListener('click', () => {
      cropModal.style.display = 'none';
      cropper.destroy();
    });

    cropModal.addEventListener('click', (e) => {
      if (e.target === cropModal) {
        cropModal.style.display = 'none';
        if (cropper) cropper.destroy();
      }
    });

    productForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log("Form submit intercepted - sending via fetch");

      document.querySelectorAll('.field-error').forEach(error => error.style.display = 'none');
      let hasErrors = false;

      const name = productForm.querySelector('[name="name"]').value.trim();
      if (!name) { document.getElementById('name-error').style.display = 'block'; hasErrors = true; }

      const price = productForm.querySelector('[name="price"]').value;
      if (!price) { document.getElementById('price-error').style.display = 'block'; hasErrors = true; }

      const category = productForm.querySelector('[name="category"]').value;
      if (!category) { document.getElementById('category-error').style.display = 'block'; hasErrors = true; }

      const language = productForm.querySelector('[name="language"]').value;
      if (!language) { document.getElementById('language-error').style.display = 'block'; hasErrors = true; }

      const stock = productForm.querySelector('[name="stock"]').value;
      if (stock && (stock < 0 || stock > 100)) {
        document.getElementById('stock-error').style.display = 'block';
        hasErrors = true;
      }
      if (!stock) { document.getElementById('stock-error').style.display = 'block'; hasErrors = true; }

      const author = productForm.querySelector('[name="author"]').value.trim();
      if (!author) { document.getElementById('author-error').style.display = 'block'; hasErrors = true; }

      const discount = productForm.querySelector('[name="discount"]').value;
      if (discount && (discount < 0 || discount > 100)) {
        document.getElementById('discount-error').style.display = 'block';
        hasErrors = true;
      }

      const description = productForm.querySelector('[name="description"]').value.trim();
      if (!description) { document.getElementById('description-error').style.display = 'block'; hasErrors = true; }

      if (imagePreview.children.length < 3) {
        document.getElementById('images-error').style.display = 'block';
        hasErrors = true;
      }

      if (hasErrors) {
        showValidationPopup('Please fill in all required fields.');
        return;
      }

      const formData = new FormData();
      formData.append('name', name);
      formData.append('price', price);
      formData.append('category', category);
      formData.append('language', language);
      formData.append('stock', stock);
      formData.append('author', author);
      if (discount) formData.append('discount', discount);
      formData.append('description', description);

      imageFiles.forEach((fileObj, index) => {
        console.log(`Appending image ${index}:`, fileObj.file.name, fileObj.file.size, fileObj.file.type);
        formData.append('images', fileObj.file); // Must be "images"
      });

      console.log("FormData contents:", Array.from(formData.entries()));

      try {
        const response = await fetch('/admin/products-add', {
          method: 'POST',
          body: formData,
          credentials: 'include',
        });

        const text = await response.text();
        console.log("Raw server response:", text);

        if (!response.ok) {
          throw new Error('Server returned an error: ' + text);
        }

        const data = JSON.parse(text);
        if (data.success) {
          showPopup('Product added successfully!');
          setTimeout(() => window.location.href = '/admin/products', 1000);
        } else {
          showPopup(data.message || 'Failed to add product.');
        }
      } catch (error) {
        const message = error?.response?.data?.message || "only images are allowed";
        alert(`❌ ${message}`);
      }
    });

    function showPopup(message) {
      popupText.textContent = message;
      popup.style.display = 'flex';
      validationPopup.style.display = 'none';
      cropModal.style.display = 'none';
    }

    function showValidationPopup(message) {
      validationText.textContent = message;
      validationPopup.style.display = 'flex';
      popup.style.display = 'none';
      cropModal.style.display = 'none';
    }
  </script>
</body>
</html>