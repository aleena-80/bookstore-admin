<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-store, no-cache, must-revalidate, post-check=0, pre-check=0" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <title>Admin Panel - Ocean Books</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/exceljs@4.2.0/dist/exceljs.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
h2{color: white;}
        body {
            font-family: 'Roboto', sans-serif;
            background-color: rgb(32,31,49);
            color: #FFFFFF;
            display: flex;
            margin: 0;
        }

        .sidebar {
            width: 220px;
            background: rgb(32,31,49);
            color: #FFFFFF;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
        }

        .sidebar-header {
            padding: 20px 10px;
            text-align: center;
            background: rgb(32,31,49);
            border-bottom: 1px solid #E5E5E5;
        }

        .sidebar-header h2 {
            font-size: 1.6em;
            margin: 0;
            color: rgb(255, 255, 255);
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .sidebar ul {
            padding: 10px 0;
        }

        .sidebar li {
            margin-bottom: 10px;
        }

        .sidebar a, .sidebar button {
            color: #FFFFFF;
            text-decoration: none;
            font-size: 1em;
            padding: 12px 20px;
            border-radius: 5px;
            background: none;
            border: none;
            text-align: left;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: background 0.3s;
        }

        .sidebar a:hover, .sidebar button:hover {
            background: rgba(255, 186, 222, 0.2);
        }

        .sidebar a.active {
            color: rgb(255, 255, 255);
        }

        .main-content {
            margin-left: 220px;
            flex: 1;
            padding: 20px;
        }

        h1 {
            color: #FFFFFF;
            margin-bottom: 20px;
            font-size: 28px;
            font-weight: 700;
        }

        .dashboard-info {
            background: #FFFFFF;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            color: rgb(32,31,49);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgb(40, 39, 60);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s, background 0.3s;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card i {
            font-size: 2em;
            margin-bottom: 10px;
            color: #FFFFFF;
        }

        .stat-card h3 {
            font-size: 1.2em;
            margin-bottom: 5px;
            color: #FFFFFF;
        }

        .stat-card p {
            font-size: 1.5em;
            font-weight: 700;
            color: #FFFFFF;
        }

        .sales-report-container {
            background: rgb(40, 39, 60);
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
        }

        .sales-report-container h2 {
            color: #FFFFFF;
            margin-bottom: 15px;
        }

        .filters {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 20px;
            align-items: center;
        }

        .filters label {
            color: #FFFFFF;
            font-weight: 500;
        }

        .filters input[type="date"],
        .filters select {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #E5E5E5;
            background: #FFFFFF;
            color: rgb(32,31,49);
        }

        .filters button {
            padding: 8px 15px;
            background: rgba(255, 186, 222, 0.2);
            color: #FFFFFF;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .filters button:hover {
            background: rgba(255, 186, 222, 0.4);
        }

        .sales-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
            background: #FFFFFF;
            color: rgb(32,31,49);
        }

        .sales-table th,
        .sales-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #E5E5E5;
        }

        .sales-table th {
            background: rgb(32,31,49);
            color: #FFFFFF;
            font-weight: 700;
        }

        .sales-table tr:nth-child(even) {
            background: rgba(255, 186, 222, 0.1);
        }

        .sales-table tbody tr:hover {
            background: rgba(255, 186, 222, 0.3);
        }

        .pagination {
            margin-top: 10px;
            text-align: center;
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        .pagination button {
            padding: 8px 12px;
            background: rgba(255, 186, 222, 0.2);
            color: #FFFFFF;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .pagination button:hover {
            background: rgba(255, 186, 222, 0.4);
        }

        .pagination button.active {
            background: rgba(255, 186, 222, 0.6);
            font-weight: 700;
        }

        .pagination button:disabled {
            background: rgba(255, 186, 222, 0.1);
            cursor: not-allowed;
        }

        .chart-container {
            margin-top: 30px;
            background: rgb(40, 39, 60);
            padding: 20px;
            border-radius: 10px;
            max-width: 600px;
            max-height: 400px; /* Limit container height */
            overflow: hidden; /* Prevent overflow */
        }

        .chart-container canvas {
            max-height: 300px !important; /* Constrain canvas height */
            width: 100% !important;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 180px;
            }

            .main-content {
                margin-left: 180px;
            }

            .sidebar-header h2 {
                font-size: 1.4em;
            }

            .sidebar a, .sidebar button {
                font-size: 0.9em;
                padding: 10px 15px;
            }

            h1 {
                font-size: 24px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .filters {
                flex-direction: column;
                align-items: flex-start;
            }

            .chart-container {
                max-width: 100%;
                max-height: 350px; /* Smaller height for mobile */
            }

            .chart-container canvas {
                max-height: 250px !important;
            }
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><i class="fas fa-user-shield"></i> Admin Panel</h2>
        </div>
        <ul>
            <li><a href="/admin/dashboard" class="active"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
            <li><a href="/admin/users"><i class="fas fa-users"></i> Users</a></li>
            <li><a href="/admin/categories"><i class="fas fa-tags"></i> Categories</a></li>
            <li><a href="/admin/languages"><i class="fas fa-globe"></i> Languages</a></li>
            <li><a href="/admin/products"><i class="fas fa-book"></i> Products</a></li>
            <li><a href="/admin/orders"><i class="fas fa-shopping-cart"></i> Orders</a></li>
            <li><a href="/admin/transactions"><i class="fas fa-wallet"></i> Wallet</a></li>
            <li><a href="/admin/products-add"><i class="fas fa-plus-circle"></i> Add Product</a></li>
            <li><a href="/admin/coupons"><i class="fas fa-ticket-alt"></i> Coupons</a></li>
            <li><a href="/admin/banners"><i class="fas fa-images"></i> Banners</a></li>
            <li><form action="/admin/logout" method="POST"><button><i class="fas fa-sign-out-alt"></i> Logout</button></form></li>
        </ul>
    </div>
    <div class="main-content">
        <h1>Admin Dashboard</h1>
        <div class="dashboard-info">
            <div class="stats-grid">
                <div class="stat-card">
                    <i class="fas fa-users"></i>
                    <h3>Total Users</h3>
                    <p><%= totalUsers || '0' %></p>
                </div>
                <div class="stat-card">
                    <i class="fas fa-shopping-cart"></i>
                    <h3>Total Orders</h3>
                    <p><%= totalOrders || '0' %></p>
                </div>
                <div class="stat-card">
                    <i class="fas fa-rupee-sign"></i>
                    <h3>Total Sales</h3>
                    <p>â‚¹<%= totalSales ? totalSales.toFixed(2) : '0.00' %></p>
                </div>
                <div class="stat-card">
                    <i class="fas fa-redo-alt"></i>
                    <h3>Refunds</h3>
                    <p>â‚¹<%= totalRefund ? totalRefund.toFixed(2) : '0.00' %></p>
                </div>
                <div class="stat-card">
                    <i class="fas fa-ban"></i>
                    <h3>Cancellations</h3>
                    <p>â‚¹<%= totalCancellations ? totalCancellations.toFixed(2) : '0.00' %></p>
                </div>
                <div class="stat-card">
                    <i class="fas fa-undo"></i>
                    <h3>Returns</h3>
                    <p>â‚¹<%= totalReturns ? totalReturns.toFixed(2) : '0.00' %></p>
                </div>
            </div>

            <div class="sales-report-container">
                <h2>Sales Report</h2>
                <div class="filters">
                    <label>Start Date:</label>
                    <input type="date" id="startDate" name="startDate">
                    <label>End Date:</label>
                    <input type="date" id="endDate" name="endDate">
                    <label>Filter By:</label>
                    <select id="filterType" name="filterType" onchange="toggleDateFields()">
                        <option value="all">All</option>
                        <option value="day">Day</option>
                        <option value="week">Week</option>
                        <option value="month">Month</option>
                        <option value="year">Year</option>
                    </select>
                    <button type="button" onclick="fetchSalesReport()">Search</button>
                    <button type="button" onclick="clearFilter()">Clear Filter</button>
                    <button type="button" onclick="exportToPDF()">Export to PDF</button>
                    <button type="button" onclick="exportToExcel()">Export to Excel</button>
                </div>
                <table id="salesReportTable" class="sales-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Status</th>
                            <th>Total Amount</th>
                            <th>Payment Method</th>
                            <th>Product(QTY)</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="pagination" id="pagination"></div>
            </div>

            <div class="chart-container">
                <h2>Sales Overview</h2>
                <canvas id="salesChart"></canvas>
            </div>
            <div class="chart-container">
                <h2>Top 10 Best Selling Products</h2>
                <canvas id="productsChart"></canvas>
            </div>
            <div class="chart-container">
                <h2>Top 10 Best Selling Categories</h2>
                <canvas id="categoriesChart"></canvas>
            </div>
            <div class="chart-container">
                <h2>Top 10 Best Selling Brands</h2>
                <canvas id="brandsChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        let salesData = [];
        let currentPage = 1;
        const rowsPerPage = 10;
        let isFetching = false; // Prevent multiple fetch calls

        function toggleDateFields() {
            const filterType = document.getElementById('filterType').value;
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            if (filterType === 'all') {
                startDate.disabled = false;
                endDate.disabled = false;
            } else {
                startDate.disabled = true;
                endDate.disabled = true;
                startDate.value = '';
                endDate.value = '';
            }
        }

        async function fetchSalesReport(page = 1) {
            if (isFetching) {
                console.log('Fetch already in progress, skipping...');
                return;
            }
            isFetching = true;
            currentPage = page;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const filterType = document.getElementById('filterType').value;

            let start, end;
            if (filterType !== 'all') {
                ({ start, end } = getDateRange(filterType));
            }
            if (startDate && endDate) {
                start = startDate;
                end = endDate;
            }

            let url = '/admin/sales-report';
            if (start && end) {
                url += `?start=${start}&end=${end}`;
            }
            console.log('Fetching sales report with URL:', url);

            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                console.log('Sales Report Data:', data);
                salesData = data;
                renderTable();
                updateChart({ 
                    salesCount: data.length, 
                    totalSales: data.reduce((sum, o) => sum + (o.totalAmount || 0), 0), 
                    totalDiscount: data.reduce((sum, o) => sum + (o.discount || 0), 0) 
                });
            } catch (error) {
                console.error('Error fetching sales data:', error);
            } finally {
                isFetching = false;
            }

            // Fetch additional charts data
            await Promise.all([
                fetchTopProducts(start, end),
                fetchTopCategories(start, end),
                fetchTopBrands(start, end)
            ]);
        }

        function getDateRange(filter) {
            const today = new Date();
            let start, end;

            let tomorrow = new Date(today);
            tomorrow.setDate(today.getDate() + 1);
            end = tomorrow.toISOString().split('T')[0];

            switch (filter) {
                case 'day':
                    start = today.toISOString().split('T')[0];
                    break;
                case 'week':
                    let lastWeek = new Date(today);
                    lastWeek.setDate(today.getDate() - 6);
                    start = lastWeek.toISOString().split('T')[0];
                    break;
                case 'month':
                    let firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                    start = firstDayOfMonth.toISOString().split('T')[0];
                    break;
                case 'year':
                    let firstDayOfYear = new Date(today.getFullYear(), 0, 1);
                    start = firstDayOfYear.toISOString().split('T')[0];
                    break;
            }
            return { start, end };
        }

        function renderTable() {
            const tableBody = document.querySelector('#salesReportTable tbody');
            tableBody.innerHTML = '';

            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const paginatedData = salesData.slice(start, end);

            paginatedData.forEach(order => {
                const productsWithQty = order.items
                    ? order.items.map(item => `${item.productName || 'N/A'} (${item.quantity})`).join(', ')
                    : 'No items';
                const row = `
                    <tr>
                        <td>${order.orderId}</td>
                        <td>${new Date(order.date).toLocaleDateString()}</td>
                        <td>${order.customer || 'N/A'}</td>
                        <td>${order.status}</td>
                        <td>â‚¹${order.totalAmount ? order.totalAmount.toFixed(2) : '0.00'}</td>
                        <td>${order.paymentMethod || 'N/A'}</td>
                        <td>${productsWithQty}</td>
                    </tr>`;
                tableBody.innerHTML += row;
            });

            renderPagination();
        }

        function renderPagination() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            const totalPages = Math.ceil(salesData.length / rowsPerPage);

            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.className = i === currentPage ? 'active' : '';
                button.onclick = () => fetchSalesReport(i);
                pagination.appendChild(button);
            }
        }

        async function exportToPDF() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const filterType = document.getElementById('filterType').value;

            let url = '/admin/sales-report-pdf';
            if (filterType !== 'all') {
                const { start, end } = getDateRange(filterType);
                url += `?start=${start}&end=${end}`;
            } else if (startDate && endDate) {
                url += `?start=${startDate}&end=${endDate}`;
            }

            const today = new Date();
            let filename;
            switch (filterType) {
                case 'day':
                    filename = `Sales_Report_Today_${today.toISOString().split('T')[0]}.pdf`;
                    break;
                case 'week':
                    let lastWeek = new Date();
                    lastWeek.setDate(today.getDate() - 7);
                    filename = `Sales_Report_Week_${lastWeek.toISOString().split('T')[0]}_to_${today.toISOString().split('T')[0]}.pdf`;
                    break;
                case 'month':
                    let firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                    filename = `Sales_Report_Month_${firstDayOfMonth.toISOString().split('T')[0]}_to_${today.toISOString().split('T')[0]}.pdf`;
                    break;
                case 'year':
                    let firstDayOfYear = new Date(today.getFullYear(), 0, 1);
                    filename = `Sales_Report_Year_${firstDayOfYear.toISOString().split('T')[0]}_to_${today.toISOString().split('T')[0]}.pdf`;
                    break;
                default:
                    filename = startDate && endDate
                        ? `Sales_Report_${startDate}_to_${endDate}.pdf`
                        : `Sales_Report_All_Orders.pdf`;
            }

            try {
                console.log('Downloading PDF with URL:', url);
                const response = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/pdf' } });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Failed to fetch PDF: ${response.status} ${errorText}`);
                }
                const blob = await response.blob();
                if (blob.type !== 'application/pdf') {
                    throw new Error('Received non-PDF response');
                }
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
            } catch (error) {
                console.error('PDF Download Error:', error);
                alert(`Failed to download PDF: ${error.message}`);
            }
        }

        async function exportToExcel() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const filterType = document.getElementById('filterType').value;

            let fileName;
            const today = new Date();
            if (filterType === 'day') {
                fileName = `Sales_Report_Today_${today.toISOString().split('T')[0]}.xlsx`;
            } else if (filterType === 'month') {
                let monthName = today.toLocaleString('default', { month: 'long' });
                fileName = `Sales_Report_${monthName}-${today.getFullYear()}.xlsx`;
            } else if (filterType === 'year') {
                fileName = `Sales_Report_${today.getFullYear()}.xlsx`;
            } else if (startDate && endDate) {
                fileName = `Sales_Report_${startDate}_to_${endDate}.xlsx`;
            } else {
                fileName = `Sales_Report.xlsx`;
            }

            const headers = [
                'Order ID',
                'Date',
                'Customer',
                'Status',
                'Total Price',
                'Discount',
                'Final Amount',
                'Payment Method',
                'Products (Qty)'
            ];

            const dataRows = salesData.map(order => {
                const productsWithQty = order.items
                    ? order.items.map(item => `${item.productName || 'N/A'} (${item.quantity})`).join(', ')
                    : 'No items';
                return [
                    order.orderId,
                    new Date(order.date).toLocaleDateString(),
                    order.customer || 'N/A',
                    order.status,
                    order.totalPrice ? order.totalPrice.toFixed(2) : '0.00',
                    order.discount ? order.discount.toFixed(2) : '0.00',
                    order.totalAmount ? order.totalAmount.toFixed(2) : '0.00',
                    order.paymentMethod || 'N/A',
                    productsWithQty
                ];
            });

            const totalPriceSum = salesData.reduce((sum, order) => sum + (order.totalPrice || 0), 0);
            const discountSum = salesData.reduce((sum, order) => sum + (order.discount || 0), 0);
            const finalAmountSum = salesData.reduce((sum, order) => sum + (order.totalAmount || 0), 0);

            const summaryRows = [
                [],
                ['Summary', '', '', '', totalPriceSum.toFixed(2), discountSum.toFixed(2), finalAmountSum.toFixed(2), '', '']
            ];

            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Sales Report');
            worksheet.addRow(headers);
            dataRows.forEach(row => worksheet.addRow(row));
            summaryRows.forEach(row => worksheet.addRow(row));

            worksheet.columns = [
                { width: 20 },
                { width: 15 },
                { width: 25 },
                { width: 15 },
                { width: 15 },
                { width: 15 },
                { width: 15 },
                { width: 15 },
                { width: 30 }
            ];

            try {
                const buffer = await workbook.xlsx.writeBuffer();
                const blob = new Blob([buffer], { type: 'application/octet-stream' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(link.href);
            } catch (error) {
                console.error('Excel Export Error:', error);
                alert('Failed to export Excel file');
            }
        }

        function clearFilter() {
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            document.getElementById('filterType').value = 'all';
            toggleDateFields();
            fetchSalesReport();
        }

        function updateChart(data) {
            const ctx = document.getElementById('salesChart').getContext('2d');
            if (window.salesChart instanceof Chart) {
                window.salesChart.destroy();
            }
            window.salesChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Orders', 'Sales (â‚¹)', 'Discount (â‚¹)'],
                    datasets: [{
                        label: 'Sales Overview',
                        data: [data.salesCount, data.totalSales, data.totalDiscount],
                        backgroundColor: [
                            'rgba(255, 186, 222, 0.6)',
                            'rgba(88, 204, 2, 0.6)',
                            'rgba(46, 204, 113, 0.6)'
                        ],
                        borderColor: [
                            'rgba(255, 186, 222, 1)',
                            'rgba(88, 204, 2, 1)',
                            'rgba(46, 204, 113, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        legend: { 
                            labels: { color: '#FFFFFF' },
                            position: 'bottom'
                        },
                        title: { 
                            display: true, 
                            text: 'Sales Overview', 
                            color: '#FFFFFF',
                            font: { size: 16 }
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: {
                        padding: 10
                    }
                }
            });
            console.log('Sales Chart Updated:', data);
        }

        async function fetchTopProducts(start, end) {
            let url = '/admin/top-products';
            if (start && end) {
                url += `?start=${start}&end=${end}`;
            }
            console.log('Fetching top products with URL:', url);
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                console.log('Top Products Data:', data);
                updateProductsChart(data);
            } catch (error) {
                console.error('Error fetching top products:', error);
            }
        }

        function updateProductsChart(data) {
            const ctx = document.getElementById('productsChart').getContext('2d');
            if (window.productsChart instanceof Chart) {
                window.productsChart.destroy();
            }
            window.productsChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: data.map(item => item.name),
                    datasets: [{
                        label: 'Units Sold',
                        data: data.map(item => item.totalQuantity),
                        backgroundColor: [
                            'rgba(255, 186, 222, 0.6)',
                            'rgba(88, 204, 2, 0.6)',
                            'rgba(46, 204, 113, 0.6)',
                            'rgba(52, 152, 219, 0.6)',
                            'rgba(155, 89, 182, 0.6)',
                            'rgba(241, 196, 15, 0.6)',
                            'rgba(231, 76, 60, 0.6)',
                            'rgba(26, 188, 156, 0.6)',
                            'rgba(149, 165, 166, 0.6)',
                            'rgba(230, 126, 34, 0.6)'
                        ],
                        borderColor: [
                            'rgba(255, 186, 222, 1)',
                            'rgba(88, 204, 2, 1)',
                            'rgba(46, 204, 113, 1)',
                            'rgba(52, 152, 219, 1)',
                            'rgba(155, 89, 182, 1)',
                            'rgba(241, 196, 15, 1)',
                            'rgba(231, 76, 60, 1)',
                            'rgba(26, 188, 156, 1)',
                            'rgba(149, 165, 166, 1)',
                            'rgba(230, 126, 34, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        legend: { 
                            labels: { color: '#FFFFFF' },
                            position: 'bottom'
                        },
                        title: { 
                            display: true, 
                            text: 'Top 10 Best Selling Products', 
                            color: '#FFFFFF', 
                            font: { size: 16 } 
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: {
                        padding: 10
                    }
                }
            });
            console.log('Products Chart Updated:', data);
        }

        async function fetchTopCategories(start, end) {
            let url = '/admin/top-categories';
            if (start && end) {
                url += `?start=${start}&end=${end}`;
            }
            console.log('Fetching top categories with URL:', url);
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                console.log('Top Categories Data:', data);
                updateCategoriesChart(data);
            } catch (error) {
                console.error('Error fetching top categories:', error);
            }
        }

        function updateCategoriesChart(data) {
            const ctx = document.getElementById('categoriesChart').getContext('2d');
            if (window.categoriesChart instanceof Chart) {
                window.categoriesChart.destroy();
            }
            window.categoriesChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: data.map(item => item.name),
                    datasets: [{
                        label: 'Units Sold',
                        data: data.map(item => item.totalQuantity),
                        backgroundColor: [
                            'rgba(255, 186, 222, 0.6)',
                            'rgba(88, 204, 2, 0.6)',
                            'rgba(46, 204, 113, 0.6)',
                            'rgba(52, 152, 219, 0.6)',
                            'rgba(155, 89, 182, 0.6)',
                            'rgba(241, 196, 15, 0.6)',
                            'rgba(231, 76, 60, 0.6)',
                            'rgba(26, 188, 156, 0.6)',
                            'rgba(149, 165, 166, 0.6)',
                            'rgba(230, 126, 34, 0.6)'
                        ],
                        borderColor: [
                            'rgba(255, 186, 222, 1)',
                            'rgba(88, 204, 2, 1)',
                            'rgba(46, 204, 113, 1)',
                            'rgba(52, 152, 219, 1)',
                            'rgba(155, 89, 182, 1)',
                            'rgba(241, 196, 15, 1)',
                            'rgba(231, 76, 60, 1)',
                            'rgba(26, 188, 156, 1)',
                            'rgba(149, 165, 166, 1)',
                            'rgba(230, 126, 34, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        legend: { 
                            labels: { color: '#FFFFFF' },
                            position: 'bottom'
                        },
                        title: { 
                            display: true, 
                            text: 'Top 10 Best Selling Categories', 
                            color: '#FFFFFF', 
                            font: { size: 16 } 
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: {
                        padding: 10
                    }
                }
            });
            console.log('Categories Chart Updated:', data);
        }

        async function fetchTopBrands(start, end) {
            let url = '/admin/top-brands';
            if (start && end) {
                url += `?start=${start}&end=${end}`;
            }
            console.log('Fetching top brands with URL:', url);
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                console.log('Top Brands Data:', data);
                updateBrandsChart(data);
            } catch (error) {
                console.error('Error fetching top brands:', error);
            }
        }

        function updateBrandsChart(data) {
            const ctx = document.getElementById('brandsChart').getContext('2d');
            if (window.brandsChart instanceof Chart) {
                window.brandsChart.destroy();
            }
            window.brandsChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: data.map(item => item.name),
                    datasets: [{
                        label: 'Units Sold',
                        data: data.map(item => item.totalQuantity),
                        backgroundColor: [
                            'rgba(255, 186, 222, 0.6)',
                            'rgba(88, 204, 2, 0.6)',
                            'rgba(46, 204, 113, 0.6)',
                            'rgba(52, 152, 219, 0.6)',
                            'rgba(155, 89, 182, 0.6)',
                            'rgba(241, 196, 15, 0.6)',
                            'rgba(231, 76, 60, 0.6)',
                            'rgba(26, 188, 156, 0.6)',
                            'rgba(149, 165, 166, 0.6)',
                            'rgba(230, 126, 34, 0.6)'
                        ],
                        borderColor: [
                            'rgba(255, 186, 222, 1)',
                            'rgba(88, 204, 2, 1)',
                            'rgba(46, 204, 113, 1)',
                            'rgba(52, 152, 219, 1)',
                            'rgba(155, 89, 182, 1)',
                            'rgba(241, 196, 15, 1)',
                            'rgba(231, 76, 60, 1)',
                            'rgba(26, 188, 156, 1)',
                            'rgba(149, 165, 166, 1)',
                            'rgba(230, 126, 34, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    plugins: {
                        legend: { 
                            labels: { color: '#FFFFFF' },
                            position: 'bottom'
                        },
                        title: { 
                            display: true, 
                            text: 'Top 10 Best Selling Brands', 
                            color: '#FFFFFF', 
                            font: { size: 16 } 
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: {
                        padding: 10
                    }
                }
            });
            console.log('Brands Chart Updated:', data);
        }

        // Prevent back navigation
        window.history.replaceState(null, null, window.location.href);
        window.onpopstate = function(event) {
            window.history.forward();
        };

        // Initialize
        toggleDateFields();
        fetchSalesReport();
    </script>
</body>