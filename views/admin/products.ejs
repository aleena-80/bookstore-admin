<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products - Ocean Books</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Roboto', sans-serif; background-color: rgb(32,31,49); color: #FFFFFF; min-height: 100vh; display: flex; margin: 0; }
        .sidebar { width: 220px; background: rgb(32,31,49); color: #FFFFFF; height: 100vh; position: fixed; top: 0; left: 0; box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3); }
        .sidebar-header { padding: 20px 10px; text-align: center; background: rgb(32,31,49); border-bottom: 1px solid #E5E5E5; }
        .sidebar-header h2 { font-size: 1.6em; margin: 0; color: #FFFFFF; font-weight: 700; display: flex; align-items: center; justify-content: center; gap: 10px; }
        .sidebar ul { padding: 10px 0; }
        .sidebar li { margin-bottom: 10px; }
        .sidebar a, .sidebar button { color: #FFFFFF; text-decoration: none; font-size: 1em; padding: 12px 20px; border-radius: 5px; background: none; border: none; text-align: left; cursor: pointer; display: flex; align-items: center; gap: 10px; transition: background 0.3s; }
        .sidebar a:hover, .sidebar button:hover { background: rgba(255, 255, 255, 0.2); }
        .sidebar a.active { color: rgb(255, 255, 255); }
        .main-content { margin-left: 220px; flex: 1; padding: 20px; }
        h1 { color: #FFFFFF; margin-bottom: 20px; font-size: 28px; font-weight: 700; }
        .filter { margin-bottom: 20px; display: flex; gap: 10px; flex-wrap: wrap; }
        .filter input, .filter button { padding: 8px 12px; border-radius: 5px; border: 1px solid #E5E5E5; font-size: 14px; background: #FFFFFF; color: rgb(32,31,49); }
        .filter button { background: #FFBADE; color: rgb(32,31,49); border: none; transition: background 0.3s; }
        .filter button:hover { background: rgba(255, 186, 222, 0.8); }
        table { width: 100%; border-collapse: collapse; background: #FFFFFF; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); border-radius: 8px; overflow: hidden; }
        th, td { padding: 12px; text-align: left; color: rgb(32,31,49); vertical-align: middle; }
        th { background: rgb(32,31,49); color: #FFFFFF; font-weight: 700; }
        tbody tr { border-bottom: 1px solid #E5E5E5; }
        tbody tr:last-child { border-bottom: none; }
        .edit-form-row td { padding: 0; border: none; }
        td img { width: 50px; height: 50px; object-fit: cover; margin-right: 5px; border-radius: 4px; }
        .actions { display: flex; gap: 10px; align-items: center; justify-content: flex-start; }
        .actions form { margin: 0; }
        .toggle-list-btn, .edit-btn { background: #FFBADE; color: rgb(32,31,49); padding: 6px 12px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; transition: background 0.3s; }
        .toggle-list-btn:hover, .edit-btn:hover { background: rgba(255, 186, 222, 0.8); }
        .edit-form { display: none; padding: 15px; background: #F9F9F9; border-radius: 5px; margin: 10px 0; }
        .edit-form.active { display: block; }
        .edit-form input, .edit-form textarea, .edit-form select { padding: 8px; margin: 5px 0; width: 100%; border: 1px solid #E5E5E5; border-radius: 4px; color: rgb(32,31,49); font-size: 14px; }
        .edit-form textarea { min-height: 80px; resize: vertical; }
        .edit-form button { background: #FFBADE; color: rgb(32,31,49); padding: 8px 15px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; transition: background 0.3s; }
        .edit-form button:hover { background: rgba(255, 186, 222, 0.8); }
        .image-preview { display: flex; gap: 10px; flex-wrap: wrap; margin-top: 10px; }
        .image-container { position: relative; width: 100px; height: 100px; }
        .image-container img { max-width: 100%; max-height: 100%; object-fit: cover; border-radius: 4px; }
        .crop-btn, .remove-btn { position: absolute; top: 5px; padding: 3px 6px; color: #FFFFFF; border: none; border-radius: 3px; cursor: pointer; font-size: 10px; transition: background 0.2s; }
        .crop-btn { right: 30px; background: #2ECC71; }
        .crop-btn:hover { background: #27AE60; }
        .remove-btn { right: 5px; background: #E74C3C; }
        .remove-btn:hover { background: #C0392B; }
        #cropModal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; }
        #cropModal .modal-content { background: #FFFFFF; margin: 50px auto; padding: 20px; width: 90%; max-width: 500px; border-radius: 10px; text-align: center; }
        #cropImage { max-width: 100%; max-height: 300px; }
        #cropConfirm, #cropCancel { padding: 10px 20px; margin: 10px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; }
        #cropConfirm { background: #2ECC71; color: #FFFFFF; }
        #cropCancel { background: #E74C3C; color: #FFFFFF; }
        .pagination { margin-top: 20px; text-align: center; }
        .pagination a { padding: 8px 12px; margin: 0 5px; text-decoration: none; color: #FFBADE; font-size: 14px; transition: background 0.3s; }
        .pagination a:hover { background: rgba(255, 186, 222, 0.2); }
        .pagination a.active { background: #FFBADE; color: rgb(32,31,49); border-radius: 5px; }
        .success-popup { display: none; position: fixed; top: 20px; right: 20px; background: #2ECC71; color: #FFFFFF; padding: 10px 20px; border-radius: 5px; z-index: 1000; font-size: 14px; }
        .toggle-modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; }
        .toggle-modal-content { background: #FFFFFF; margin: 20% auto; padding: 20px; width: 90%; max-width: 400px; border-radius: 8px; text-align: center; }
        .toggle-modal-content p { margin: 0 0 20px; color: rgb(32,31,49); font-size: 16px; }
        .toggle-modal-content button { padding: 8px 16px; margin: 0 10px; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; transition: background 0.3s; }
        .toggle-yes { background: #FFBADE; color: rgb(32,31,49); }
        .toggle-yes:hover { background: rgba(255, 186, 222, 0.8); }
        .toggle-no { background: #E74C3C; color: #FFFFFF; }
        .toggle-no:hover { background: #C0392B; }
        @media (max-width: 768px) {
            .sidebar { width: 180px; }
            .main-content { margin-left: 180px; }
            .sidebar-header h2 { font-size: 1.4em; }
            .sidebar a, .sidebar button { font-size: 0.9em; padding: 10px 15px; }
            h1 { font-size: 24px; }
            td img { width: 40px; height: 40px; }
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><i class="fas fa-user-shield"></i> Admin Panel</h2>
        </div>
        <ul>
            <li><a href="/admin/users"><i class="fas fa-users"></i> Users</a></li>
            <li><a href="/admin/categories"><i class="fas fa-tags"></i> Categories</a></li>
            <li><a href="/admin/languages"><i class="fas fa-globe"></i> Languages</a></li>
            <li><a href="/admin/products" class="active"><i class="fas fa-book"></i> Products</a></li>
            <li><a href="/admin/orders"><i class="fas fa-shopping-cart"></i> Orders</a></li>
            <li><a href="/admin/products-add"><i class="fas fa-plus-circle"></i> Add Product</a></li>
            <li><a href="/admin/banners" class="active"><i class="fas fa-images"></i> Banners</a></li>
            <li><form action="/admin/logout" method="POST"><button><i class="fas fa-sign-out-alt"></i> Logout</button></form></li>
        </ul>
    </div>
    <div class="main-content">
        <h1>Products</h1>
        <div class="filter">
            <form method="GET" action="/admin/products">
                <input type="text" name="search" value="<%= search %>" placeholder="Search products">
                <button type="submit">Search</button>
                <button type="button" onclick="window.location.href='/admin/products'">Clear</button>
            </form>
        </div>
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Images</th>
                    <th>Price</th>
                    <th>Discount</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% products.forEach(product => { %>
                    <tr>
                        <td><%= product.name %></td>
                        <td>
                            <% if (product.images && Array.isArray(product.images)) { %>
                                <% product.images.forEach(img => { %>
                                    <img src="<%= img %>" alt="Product Image" onerror="this.src='/images/default.jpg'; this.onerror=null;">
                                <% }); %>
                            <% } else { %>
                                <span>No images</span>
                            <% } %>
                        </td>
                        <td>â‚¹<%= product.price %></td>
                        <td><%= product.discount %>%</td>
                        <td><%= product.stock %></td>
                        <td class="actions">
                            <form method="POST" action="/admin/products/toggle-list/<%= product._id %>" id="toggleForm-<%= product._id %>" class="toggle-form">
                                <button type="button" class="toggle-list-btn" onclick="showToggleModal('<%= product._id %>', '<%= product.name %>', '<%= product.isListed ? 'unlist' : 'list' %>')">
                                    <%= product.isListed ? 'Unlist' : 'List' %>
                                </button>
                            </form>
                            <button class="edit-btn" onclick="toggleEdit('<%= product._id %>')">Edit</button>
                        </td>
                    </tr>
                    <tr class="edit-form-row">
                        <td colspan="6">
                            <form method="POST" action="/admin/products/edit/<%= product._id %>" enctype="multipart/form-data" id="editForm-<%= product._id %>" class="edit-form">
                                <input type="text" name="name" value="<%= product.name %>" required placeholder="Name">
                                <input type="number" name="price" value="<%= product.price %>" required placeholder="Price" min="1">
                                <input type="number" name="discount" value="<%= product.discount %>" min="0" max="100" placeholder="Discount (%)">
                                <select name="category" required>
                                    <option value="">Select Category</option>
                                    <% categories.forEach(cat => { %>
                                        <option value="<%= cat._id %>" <%= product.category && product.category._id && product.category._id.toString() === cat._id.toString() ? 'selected' : '' %>><%= cat.name %></option>
                                    <% }) %>
                                </select>
                                <select name="language" required>
                                    <option value="">Select Language</option>
                                    <% languages.forEach(lang => { %>
                                        <option value="<%= lang.name %>" <%= product.language === lang.name ? 'selected' : '' %>><%= lang.name %></option>
                                    <% }) %>
                                </select>
                                <input type="number" name="stock" value="<%= product.stock %>" required placeholder="Stock" min="0">
                                <input type="text" name="author" value="<%= product.author || '' %>" placeholder="Author">
                                <textarea name="description" placeholder="Description"><%= product.description || '' %></textarea>
                                <input type="file" name="images" id="imageInput-<%= product._id %>" multiple accept="image/*">
                                <div class="image-preview" id="imagePreview-<%= product._id %>">
                                    <% product.images.forEach((img, i) => { const index = i; %>
                                        <div class="image-container">
                                            <img src="<%= img %>" alt="Product Image" data-index="<%= index %>">
                                            <button type="button" class="crop-btn" onclick="startCrop(this.previousElementSibling, '<%= product._id %>')">Crop</button>
                                            <button type="button" class="remove-btn" onclick="this.parentElement.remove(); updateFileInput('<%= product._id %>')">X</button>
                                            <input type="hidden" name="existingImages" value="<%= img %>">
                                        </div>
                                    <% }); %>
                                </div>
                                <button type="submit">Update</button>
                            </form>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
        <div class="pagination">
            <% for(let i = 1; i <= totalPages; i++) { %>
                <a href="/admin/products?page=<%= i %>&search=<%= search %>" <%= currentPage === i ? 'class="active"' : '' %>><%= i %></a>
            <% } %>
        </div>
    </div>

    <div id="cropModal">
        <div class="modal-content">
            <img id="cropImage" src="">
            <div>
                <button type="button" id="cropConfirm">Crop and Save</button>
                <button type="button" id="cropCancel">Cancel</button>
            </div>
        </div>
    </div>
    <div id="successPopup" class="success-popup">Product updated successfully!</div>
    <div id="toggleModal" class="toggle-modal">
        <div class="toggle-modal-content">
            <p id="toggleMessage"></p>
            <button id="toggleYes" class="toggle-yes">Yes</button>
            <button id="toggleNo" class="toggle-no">No</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        const toggleModal = document.getElementById('toggleModal');
        const toggleMessage = document.getElementById('toggleMessage');
        const toggleYes = document.getElementById('toggleYes');
        const toggleNo = document.getElementById('toggleNo');
        let currentToggleForm;
    
        function showToggleModal(productId, productName, action) {
            currentToggleForm = document.getElementById(`toggleForm-${productId}`);
            toggleMessage.textContent = `Are you sure you want to ${action} "${productName}"?`;
            toggleModal.style.display = 'block';
        }
    
        toggleYes.addEventListener('click', () => {
            if (currentToggleForm) currentToggleForm.submit();
            toggleModal.style.display = 'none';
        });
    
        toggleNo.addEventListener('click', () => {
            toggleModal.style.display = 'none';
            currentToggleForm = null;
        });
    
        toggleModal.addEventListener('click', (e) => {
            if (e.target === toggleModal) {
                toggleModal.style.display = 'none';
                currentToggleForm = null;
            }
        });
    
        function toggleEdit(productId) {
            const editForm = document.getElementById(`editForm-${productId}`);
            editForm.classList.toggle('active');
        }
    
        const cropModal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        const cropConfirm = document.getElementById('cropConfirm');
        const cropCancel = document.getElementById('cropCancel');
        const successPopup = document.getElementById('successPopup');
        let cropper;
        let currentImageIndex;
        let currentProductId;
    
        function startCrop(imgElement, productId) {
            currentProductId = productId;
            cropImage.src = imgElement.src;
            const preview = document.getElementById(`imagePreview-${productId}`);
            const images = Array.from(preview.querySelectorAll('img'));
            currentImageIndex = images.indexOf(imgElement);
            cropModal.style.display = 'block';
            if (cropper) cropper.destroy();
            cropper = new Cropper(cropImage, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 0.8,
                responsive: true,
            });
        }
    
        function updateFileInput(productId) {
            const imageInput = document.getElementById(`imageInput-${productId}`);
            const imagePreview = document.getElementById(`imagePreview-${productId}`);
            const dataTransfer = new DataTransfer();
            Array.from(imagePreview.children).forEach(container => {
                const img = container.querySelector('img');
                const file = Array.from(imageInput.files).find(f => f.name === `cropped-${img.dataset.index}.jpg`) || imageInput.files[img.dataset.index];
                if (file) dataTransfer.items.add(file);
            });
            imageInput.files = dataTransfer.files;
        }
    
        cropConfirm.addEventListener('click', (e) => {
            e.preventDefault();
            const canvas = cropper.getCroppedCanvas();
            if (!canvas) return;
    
            canvas.toBlob((blob) => {
                const newFile = new File([blob], `cropped-${currentImageIndex}.jpg`, { type: 'image/jpeg' });
                const imageInput = document.getElementById(`imageInput-${currentProductId}`);
                const dataTransfer = new DataTransfer();
                const files = Array.from(imageInput.files);
                files[currentImageIndex] = newFile;
                files.forEach(file => dataTransfer.items.add(file));
                imageInput.files = dataTransfer.files;
    
                const previewImg = document.querySelector(`#imagePreview-${currentProductId} img[data-index="${currentImageIndex}"]`);
                if (previewImg) previewImg.src = URL.createObjectURL(newFile);
    
                cropModal.style.display = 'none';
                cropper.destroy();
            }, 'image/jpeg');
        });
    
        cropCancel.addEventListener('click', () => {
            cropModal.style.display = 'none';
            cropper.destroy();
        });
    
        cropModal.addEventListener('click', (e) => {
            if (e.target === cropModal) {
                cropModal.style.display = 'none';
                if (cropper) cropper.destroy();
            }
        });
    
        document.querySelectorAll('.edit-form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(form);
                const name = formData.get('name');
                const price = formData.get('price');
                const discount = formData.get('discount');
                const category = formData.get('category');
                const language = formData.get('language');
                const stock = formData.get('stock');
                const existingImages = formData.getAll('existingImages'); // Array of URLs
                const newImages = Array.from(formData.getAll('images')).filter(file => file.size > 0); // Filter empty
                const totalImages = existingImages.length + newImages.length;
    
                console.log('Client Images:', { existingImages, newImages, totalImages }); // Debug
    
                const popup = document.getElementById('successPopup');
                if (!name || !price || !category || !language || !stock) {
                    popup.textContent = 'Please fill all required fields';
                    popup.style.background = '#E74C3C';
                    popup.style.display = 'block';
                    setTimeout(() => popup.style.display = 'none', 3000);
                    return;
                }
                if (price < 1 || stock < 0 || (discount && (discount < 0 || discount > 100))) {
                    popup.textContent = 'Invalid values: Price > 0, Stock >= 0, Discount 0-100';
                    popup.style.background = '#E74C3C';
                    popup.style.display = 'block';
                    setTimeout(() => popup.style.display = 'none', 3000);
                    return;
                }
                if (totalImages < 3) {
                    popup.textContent = 'At least 3 images required';
                    popup.style.background = '#E74C3C';
                    popup.style.display = 'block';
                    setTimeout(() => popup.style.display = 'none', 3000);
                    return;
                }
    
                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        credentials: 'include',
                    });
                    const data = await response.json();
                    if (response.ok) {
                        popup.textContent = 'Product updated successfully!';
                        popup.style.background = '#2ECC71';
                        popup.style.display = 'block';
                        setTimeout(() => {
                            popup.style.display = 'none';
                            window.location.reload();
                        }, 3000);
                    } else {
                        popup.textContent = data.message || 'Failed to update product';
                        popup.style.background = '#E74C3C';
                        popup.style.display = 'block';
                        setTimeout(() => popup.style.display = 'none', 3000);
                    }
                } catch (error) {
                    popup.textContent = 'Error: ' + error.message;
                    popup.style.background = '#E74C3C';
                    popup.style.display = 'block';
                    setTimeout(() => popup.style.display = 'none', 3000);
                }
            });
        });
    
        document.querySelectorAll('input[type="file"]').forEach(input => {
            input.addEventListener('change', (e) => {
                const productId = e.target.id.split('-')[1];
                const files = e.target.files;
                const imagePreview = document.getElementById(`imagePreview-${productId}`);
                const existingCount = imagePreview.children.length;
    
                if (existingCount + files.length < 3) {
                    const popup = document.getElementById('successPopup');
                    popup.textContent = 'Total images must be at least 3';
                    popup.style.background = '#E74C3C';
                    popup.style.display = 'block';
                    setTimeout(() => popup.style.display = 'none', 3000);
                    e.target.value = '';
                    return;
                }
    
                Array.from(files).forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        const imgContainer = document.createElement('div');
                        imgContainer.className = 'image-container';
                        const img = document.createElement('img');
                        img.src = event.target.result;
                        img.dataset.index = existingCount + index;
    
                        const cropBtn = document.createElement('button');
                        cropBtn.textContent = 'Crop';
                        cropBtn.className = 'crop-btn';
                        cropBtn.type = 'button';
                        cropBtn.onclick = () => startCrop(img, productId);
    
                        const removeBtn = document.createElement('button');
                        removeBtn.textContent = 'X';
                        removeBtn.className = 'remove-btn';
                        removeBtn.type = 'button';
                        removeBtn.onclick = () => {
                            imgContainer.remove();
                            updateFileInput(productId);
                        };
    
                        imgContainer.appendChild(img);
                        imgContainer.appendChild(cropBtn);
                        imgContainer.appendChild(removeBtn);
                        imagePreview.appendChild(imgContainer);
                    };
                    reader.readAsDataURL(file);
                });
            });
        });
    </script>
</body>
</html>