<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ocean Books - Orders</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Roboto', sans-serif; background: #F5F5F5; color: #1C2526; padding-top: 100px; }
        .navbar { background: #FFFFFF; padding: 15px 20px; display: flex; justify-content: space-between; align-items: center; position: fixed; top: 0; left: 0; width: 100%; z-index: 1000; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); }
        .logo h1 a { color: #58CC02; text-decoration: none; font-size: 28px; font-weight: 700; }
        .tagline { color: #1C2526; font-size: 14px; margin-top: 5px; }
        .nav-links { list-style: none; display: flex; gap: 20px; align-items: center; }
        .nav-links li a { color: #1C2526; text-decoration: none; font-size: 16px; font-weight: 700; }
        .nav-links li a:hover { color: #58CC02; }
        .breadcrumbs { padding: 20px; font-size: 14px; color: #1C2526; background-color: #E5E5E5; }
        .breadcrumbs a { color: #1C2526; text-decoration: none; transition: color 0.3s; }
        .breadcrumbs a:hover { color: #58CC02; }
        .breadcrumbs span { margin: 0 5px; }
        .order-list { max-width: 1200px; margin: 0 auto; padding: 20px; }
        h2 { color: #58CC02; margin-bottom: 20px; font-size: 28px; }
        .order-card { background: #FFFFFF; padding: 20px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05); margin-bottom: 20px; display: flex; flex-direction: column; gap: 15px; }
        .order-header { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px; }
        .order-header p { margin: 0; font-size: 16px; }
        .status { font-weight: 700; } /* Moved color logic to HTML */
        .order-items { display: flex; flex-direction: column; gap: 10px; }
        .order-item { display: flex; align-items: center; gap: 15px; }
        .order-item img { width: 60px; height: 60px; object-fit: cover; border-radius: 5px; }
        .item-details { flex: 1; }
        .actions { display: flex; gap: 10px; flex-wrap: wrap; }
        .btn { padding: 8px 16px; background: #58CC02; color: #FFFFFF; border: none; border-radius: 20px; cursor: pointer; font-weight: 700; text-decoration: none; }
        .btn:hover { background: #46a802; }
        .btn-cancel { background: #e74c3c; }
        .btn-cancel:hover { background: #c0392b; }
        .btn-return { background: #f39c12; }
        .return-reasons { margin: 10px 0;}
        .return-reasons label {display: block; margin: 5px 0;}
        .btn-return:hover { background: #e08e0b; }
        .message { position: fixed; top: 20px; right: 20px; padding: 10px 20px; background: #58CC02; color: #FFFFFF; border-radius: 5px; display: none; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); }
        .modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 2000; }
        .modal-content { background: #FFFFFF; padding: 20px; border-radius: 12px; width: 400px; text-align: center; }
        .modal-content h3 { color: #e74c3c; font-size: 20px; margin-bottom: 15px; }
        .modal-content p { color: #1C2526; margin-bottom: 10px; }
        #cancel-reason { width: 100%; padding: 10px; border: 2px solid #e74c3c; border-radius: 8px; resize: none; font-family: 'Roboto', sans-serif; }
        .modal-actions { margin-top: 20px; display: flex; gap: 10px; justify-content: center; }
    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <h1><a href="/users/landing">Ocean Books</a></h1>
                <p class="tagline">Dive into a Sea of Stories</p>
            </div>
            <ul class="nav-links">
                <li><a href="/users/wishlist"><i class="fas fa-heart"></i> (<%= wishlistCount || 0 %>)</a></li>
                <li><a href="/users/cart"><i class="fas fa-shopping-cart"></i> (<%= cartCount || 0 %>)</a></li>
                <li><a href="/users/profile"><i class="fas fa-user"></i></a></li>
                <% if (user) { %>
                    <li><a href="/users/logout"><i class="fas fa-sign-out-alt"></i></a></li>
                <% } %>
            </ul>
        </nav>
    </header>

    <section class="breadcrumbs">
        <a href="/users/home">Home</a> <span>›</span> 
        <a href="/users/products">Shop</a> <span>›</span> 
        <a href="/users/cart">Cart</a> <span>›</span> 
        <span>Orders</span>
    </section>

    <main>
        <div class="order-list">
            <h2>Your Orders</h2>
            <% if (orders.length === 0) { %>
                <p>No orders found.</p>
            <% } %>
            <% orders.forEach(order => { %>
                <div class="order-card">
                    <div class="order-header">
                        <p><strong>Order #<%= order.orderId %></strong></p>
                        <p>Date: <%= order.createdAt.toLocaleDateString() %></p>
                        <p>Status: <span class="status" style="color: <%= order.status === 'Delivered' ? '#58CC02' : order.status === 'Cancelled' ? '#e74c3c' : '#1C2526' %>"><%= order.status %></span></p>
                        <p>Total: ₹<%= order.total.toFixed(2) %></p>
                    </div>
                    <div class="order-items">
                        <% order.items.forEach(item => { %>
                            <% order.items.forEach(item => { %>
                                <div class="order-item">
                                  <img src="<%= item.productId && item.productId.images && item.productId.images.length > 0 ? item.productId.images[0] : '/default.jpg' %>" alt="<%= item.productId ? item.productId.name : 'Product Removed' %>">
                                  <div class="item-details">
                                    <p><%= item.productId ? item.productId.name : 'Product Removed' %> (Qty: <%= item.quantity %>)</p>
                                    <% if (order.status !== 'Cancelled' && order.status !== 'Returned') { %>
                                      <p>Expected Delivery: <%= order.expectedDelivery ? new Date(order.expectedDelivery).toLocaleDateString() : 'TBD' %></p>
                                    <% } %>
                                  </div>
                                </div>
                              <% }); %>
                        <% }); %>
                    </div>
                    <div class="actions">
                        <a href="/users/orders/view/<%= order._id %>" class="btn">View Details</a>
                        <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Returned') { %>
                          <button class="btn btn-cancel" onclick="showCancelModal('<%= order._id %>')">Cancel Order</button>
                        <% } %>
                        <% if (order.status === 'Delivered' && !order.returnRequest) { %>
                            <button class="btn btn-return" onclick="showReturnModal('<%= order._id %>')">Request Return</button>
                          <% } %>
                        <% if (order.returnRequest) { %>
                          <p>Return Requested</p>
                        <% } %>
                      </div>
                </div>
            <% }); %>
        </div>
    </main>

    <div class="message" id="message"></div>
    <div id="cancel-modal" class="modal">
        <div class="modal-content">
            <h3>Cancel Order</h3>
            <p>Please provide a reason for cancellation:</p>
            <textarea id="cancel-reason" rows="4" placeholder="e.g., Changed my mind..."></textarea>
            <div class="modal-actions">
                <button class="btn btn-cancel" onclick="confirmCancel()">Confirm</button>
                <button class="btn" onclick="closeCancelModal()">Close</button>
            </div>
        </div>
    </div>

    <div id="return-modal" class="modal">
        <div class="modal-content">
          <h3>Request Return</h3>
          <p>Select a reason (optional):</p>
          <div class="return-reasons">
            <label><input type="checkbox" name="returnReason" value="Defective Product"> Defective Product</label><br>
            <label><input type="checkbox" name="returnReason" value="Changed My Mind"> Changed My Mind</label><br>
            <label><input type="checkbox" name="returnReason" value="Wrong Item"> Wrong Item</label><br>
            <label><input type="checkbox" name="returnReason" value="Other"> Other</label>
          </div>
          <div class="modal-actions">
            <button class="btn btn-return" onclick="confirmReturn()">Confirm</button>
            <button class="btn" onclick="closeReturnModal()">Close</button>
          </div>
        </div>
      </div>

    <script>
        let currentOrderId;

        function showMessage(text, isError = false) {
            const msg = document.getElementById('message');
            msg.textContent = text;
            msg.style.background = isError ? '#e74c3c' : '#58CC02';
            msg.style.display = 'block';
            setTimeout(() => msg.style.display = 'none', 3000);
        }

        function showCancelModal(orderId) {
            currentOrderId = orderId;
            document.getElementById('cancel-modal').style.display = 'flex';
            document.getElementById('cancel-reason').value = '';
        }

        function closeCancelModal() {
            document.getElementById('cancel-modal').style.display = 'none';
        }


        function showReturnModal(orderId) {
            currentOrderId = orderId;
            document.getElementById('return-modal').style.display = 'flex';
            // Reset checkboxes
            document.querySelectorAll('.return-reasons input[type="checkbox"]').forEach(cb => cb.checked = false);
        }

        function closeReturnModal() {
            document.getElementById('return-modal').style.display = 'none';
        }

        async function confirmCancel() {
            const reason = document.getElementById('cancel-reason').value.trim();
            if (!reason) {
                showMessage('Please provide a reason', true);
                return;
            }

            try {
                console.log('Cancelling order:', currentOrderId, 'Reason:', reason);
                const res = await fetch(`/users/orders/cancel/${currentOrderId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ reason })
                });
                const data = await res.json();
                console.log('Cancel Response:', data);
                if (data.success) {
                    showMessage('Order cancelled successfully');
                    closeCancelModal();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showMessage(data.message || 'Failed to cancel order', true);
                }
            } catch (error) {
                console.error('Cancel Order Error:', error);
                showMessage('Error cancelling order', true);
            }
        }

        async function confirmReturn() {
            const reasons = Array.from(document.querySelectorAll('.return-reasons input[type="checkbox"]:checked'))
            .map(cb => cb.value)
            .join(', ') || 'No reason provided'; // Optional, defaults if none selected
            try {
            const res = await fetch(`/users/orders/return/${currentOrderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ reason: reasons })
            });
            const data = await res.json();
            if (data.success) {
                showMessage('Return requested successfully');
                closeReturnModal();
                setTimeout(() => location.reload(), 1000);
            } else {
                showMessage(data.message || 'Failed to request return', true);
            }
            } catch (error) {
            console.error('Request Return Error:', error);
            showMessage('Error requesting return', true);
            }
        }

        // async function requestReturn(orderId) {
        //     if (!confirm('Are you sure you want to request a return?')) return;
        //     try {
        //         const res = await fetch(`/users/orders/return/${orderId}`, {
        //             method: 'POST',
        //             headers: { 'Content-Type': 'application/json' },
        //             credentials: 'include'
        //         });
        //         const data = await res.json();
        //         if (data.success) {
        //             showMessage('Return requested successfully');
        //             setTimeout(() => location.reload(), 1000);
        //         } else {
        //             showMessage(data.message || 'Failed to request return', true);
        //         }
        //     } catch (error) {
        //         console.error('Request Return Error:', error);
        //         showMessage('Error requesting return', true);
        //     }
        // }
    </script>
</body>
</html>