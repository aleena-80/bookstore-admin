<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ocean Books - Payment</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Roboto', sans-serif; background: #F5F5F5; color: #1C2526; padding-top: 100px; }
        .navbar { background: #FFFFFF; padding: 15px 20px; display: flex; justify-content: space-between; align-items: center; position: fixed; top: 0; left: 0; width: 100%; z-index: 1000; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); }
        .logo h1 a { color: #58CC02; text-decoration: none; font-size: 28px; font-weight: 700; }
        .tagline { color: #1C2526; font-size: 14px; margin-top: 5px; }
        .nav-links { list-style: none; display: flex; gap: 20px; align-items: center; }
        .nav-links li a { color: #1C2526; text-decoration: none; font-size: 16px; font-weight: 700; }
        .nav-links li a:hover { color: #58CC02; }
        .container { max-width: 1200px; margin: 20px auto; padding: 20px; }
        .section { background: #FFFFFF; padding: 20px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05); margin-bottom: 20px; }
        .section h3 { font-size: 20px; color: #58CC02; margin-bottom: 15px; }
        .payment-option { padding: 15px; border: 2px solid #e0e0e0; border-radius: 8px; margin-bottom: 10px; display: flex; align-items: center; }
        .payment-option input { margin-right: 10px; }
        .payment-option.disabled { color: #999; cursor: not-allowed; }
        .payment-option.disabled input { cursor: not-allowed; }
        .confirm-btn { width: 100%; padding: 12px; background: #58CC02; color: #FFFFFF; border: none; border-radius: 20px; font-size: 16px; font-weight: 700; cursor: pointer; margin-top: 20px; }
        .confirm-btn:disabled { background: #ccc; cursor: not-allowed; }
        .confirm-btn:hover:not(:disabled) { background: #46a802; }
        .message { position: fixed; top: 20px; right: 20px; padding: 10px 20px; background: #58CC02; color: #FFFFFF; border-radius: 5px; display: none; }
        .summary-table { width: 100%; border-collapse: collapse; }
        .summary-table td { padding: 10px; border: 1px solid #e0e0e0; }
        .summary-table td:first-child { font-weight: 700; }
    </style>
</head>
<body>
    <header>
        <nav class="navbar">
            <div class="logo">
                <h1><a href="/users/home">Ocean Books</a></h1>
                <p class="tagline">Dive into a Sea of Stories</p>
            </div>
            <ul class="nav-links">
                <li><a href="/users/profile"><i class="fas fa-user"></i></a></li>
                <% if (typeof user !== 'undefined' && user) { %>
                    <li><a href="/users/logout"><i class="fas fa-sign-out-alt"></i></a></li>
                <% } %>
            </ul>
        </nav>
    </header>
    <div class="container">
        <div class="section">
            <h3>Delivery Address</h3>
            <p>
                <%= order.address.name || 'N/A' %>, 
                <%= order.address.street || 'N/A' %>, 
                <%= order.address.city || 'N/A' %>, 
                <%= order.address.state || 'N/A' %>, 
                <%= order.address.postalCode || 'N/A' %>, 
                <%= order.address.country || 'India' %>
            </p>
        </div>
        <div class="section">
            <h3>Select Payment Method</h3>
            <label class="payment-option <%= order.total > 1000 ? 'disabled' : '' %>">
                <input type="radio" name="paymentMethod" value="COD" <%= order.total > 1000 ? 'disabled' : 'checked' %>> 
                Cash on Delivery (COD) <%= order.total > 1000 ? '(Not available for orders above ₹1000)' : '' %>
            </label>
            <label class="payment-option">
                <input type="radio" name="paymentMethod" value="Razorpay" <%= order.total > 1000 ? 'checked' : '' %>> Pay with Razorpay
            </label>
            <label class="payment-option">
                <input type="radio" name="paymentMethod" value="Wallet"> Pay with Wallet
            </label>
            <button id="confirm-payment-btn" class="confirm-btn">Confirm Payment</button>
        </div>
    </div>
    <div class="message" id="message"></div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let walletBalance = 0;

        // Fetch wallet balance on page load
        async function fetchWalletBalance() {
            try {
                const response = await fetch('/users/wallet/balance', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });
                const data = await response.json();
                if (data.success) {
                    walletBalance = data.balance || 0;
                } else {
                    console.error('Failed to fetch wallet balance:', data.message);
                }
            } catch (error) {
                console.error('Fetch Wallet Balance Error:', error);
            }
        }

        // Initialize wallet balance
        fetchWalletBalance();

        function showMessage(text, isError = false) {
            const msg = document.getElementById('message');
            msg.textContent = text;
            msg.style.background = isError ? '#FF4D4D' : '#58CC02';
            msg.style.display = 'block';
            setTimeout(() => msg.style.display = 'none', 3000);
        }

        document.getElementById('confirm-payment-btn').addEventListener('click', async () => {
    const button = document.getElementById('confirm-payment-btn');
    button.disabled = true;
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
    const orderId = '<%= order.orderId %>';
    const orderTotal = <%= order.total %>;
    const userId = '<%= user._id %>';

    console.log('Confirming Payment:', { orderId, paymentMethod, orderTotal, 
        walletBalance });

    // Validate wallet balance for Wallet payment
    if (paymentMethod === 'Wallet') {
        if (balance === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Empty Wallet',
                text: 'Your wallet is empty (₹0.00). Please add funds or select another payment method.',
                showCancelButton: true,
                cancelButtonColor: '#FF4D4D',
                confirmButtonColor: '#58CC02',
                confirmButtonText: 'Add Funds',
                cancelButtonText: 'Close'
            }).then((result) => {
                if (result.isConfirmed) window.location.href = '/users/wallet';
                button.disabled = false;
            });
            return;
        }
        if (balance < orderTotal) {
            const shortfall = (orderTotal - balance).toFixed(2);
            Swal.fire({
                icon: 'error',
                title: 'Insufficient Balance',
                text: `Your wallet balance (₹${balance.toFixed(2)}) is insufficient for this order (₹${orderTotal.toFixed(2)}). Please add ₹${shortfall} more.`,
                showCancelButton: true,
                cancelButtonColor: '#FF4D4D',
                confirmButtonColor: '#58CC02',
                confirmButtonText: 'Add Funds',
                cancelButtonText: 'Close'
            }).then((result) => {
                if (result.isConfirmed) window.location.href = '/users/wallet';
                button.disabled = false;
            });
            return;
        }
    }

    try {
        // Add timeout to prevent hanging
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout

        const response = await fetch('/users/checkout/confirm-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ orderId, paymentMethod,userId }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        const data = await response.json();
        console.log('Confirm Payment Response:', data);

        if (data.success) {
            if (paymentMethod === 'Razorpay') {
                const razorpayResponse = await fetch('/users/checkout/create-razorpay-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ orderId })
                });
                const razorpayData = await razorpayResponse.json();
                console.log('Razorpay Response:', razorpayData);
                if (razorpayData.success) {
                    const options = {
                        key: '<%= razorpayKeyId %>',
                        amount: razorpayData.amount,
                        currency: razorpayData.currency,
                        order_id: razorpayData.orderId,
                        name: 'Ocean Books',
                        description: 'Order Payment',
                        handler: async function (response) {
                            const verifyResponse = await fetch('/users/checkout/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                credentials: 'include',
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId
                                })
                            });
                            const verifyData = await verifyResponse.json();
                            console.log('Verify Payment Response:', verifyData);
                            if (verifyData.success) {
                                window.location.href = `${verifyData.redirect}?orderId=${verifyData.orderId}`;
                            } else {
                                window.location.href = `${verifyData.redirect}?orderId=${verifyData.orderId}`;
                            }
                        },
                        prefill: { name: '<%= user.name %>', email: '<%= user.email %>' },
                        theme: { color: '#3395FF' }
                    };
                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function () {
                        window.location.href = `/users/order-failure?orderId=${orderId}`;
                    });
                    rzp.open();
                } else {
                    showMessage(razorpayData.message || 'Failed to initiate Razorpay payment', true);
                    button.disabled = false;
                }
            } else {
                console.log('Redirecting to:', `${data.redirect}?orderId=${data.orderId}`);
                window.location.href = `${data.redirect}?orderId=${data.orderId}`;
            }
        } else {
            console.error('Payment failed:', data.message);
            showMessage(data.message || 'Failed to confirm payment', true);
            button.disabled = false;
        }
    } catch (error) {
        console.error('Fetch Error:', error.message);
        showMessage('Error confirming payment: ' + error.message, true);
        button.disabled = false;
    }
});
    </script>
</body>
</html>